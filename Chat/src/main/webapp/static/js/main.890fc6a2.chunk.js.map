{
    "version": 3,
    "sources": ["utils/utils.jsx", "api/api.jsx", "actions/AddressBook.jsx", "actions/Chat.jsx", "components/StatusNotification.jsx", "reducers/Chat.jsx", "reducers/AddressBook.jsx", "actions/User.jsx", "reducers/User.jsx", "reducers/index.jsx", "components/LoginForm.jsx", "components/RegisterForm.jsx", "pages/portal.jsx", "components/Profile.jsx", "components/Avatar.jsx", "components/StartChatGroup.jsx", "components/ChatList.jsx", "components/ChatHeader.jsx", "components/AddFriend.jsx", "components/AddressBook.jsx", "components/ChatItem.jsx", "components/MessagePanel.jsx", "pages/main.jsx", "index.jsx"],
    "names": [
        "setUserIdToStorage", "userId", "sessionStorage", "setItem", "getUserIdFromStorage", "getItem", "setJwtToStorage", "jwt", "getJwtFromStorage", "clearStorage", "clear", "isEmptyString", "prop", "isAuthenticated", "ws_host", "instance", "axios", "create", "baseURL", "interceptors", "request", "use", "config", "error", "Promise", "reject", "response", "responseURL", "endsWith", "data", "message", "api", "get", "url", "headers", "post", "req", "put", "patch", "delete", "ADDRESS_BOOK_FETCHED", "ADD_FRIEND_FAIL", "ADD_FRIEND", "ADD_FRIEND_POPUP_STATE", "EMPTY", "loadAddressBookList", "dispatch", "resolve", "then", "res", "items", "results", "onlineResults", "offlineResults", "index", "length", "addressbookItem", "name", "avatar", "processUsernameForAvatar", "status", "isOnline", "online", "push", "sortOnOff", "concat", "result", "addressbook", "fetchedAddressBook", "fetchedNewAddressBookList", "store", "getState", "addressBookReducer", "newAddressBookList", "type", "fetchedAddressBookList", "receivedAddressBook", "handleChangeAddressBook", "createGetSessionIdRequest", "sessionId", "loadChatContainer", "waitingGroupUsernames", "console", "log", "START_CHAT_SINGLE", "messageItems", "currentSessionId", "startNewChatSingle", "receivedSessionId", "addNewFriend", "userName", "username", "deepcopy", "newFriend", "item", "receiveAddFriendResult", "changeUserOnlineStatus", "addressBookList", "fetchedNewAddressBook", "i", "j", "charAt", "compare", "a", "b", "sort", "statusNotification", "onlineNotification", "notification", "open", "description", "className", "icon", "size", "offlineNotification", "React", "Component", "CHATLIST_FETCHED", "CHATLIST_REFETCHED", "MESSAGE_HEADER_FETCHED", "MESSAGE_PANEL_FETCHED", "NEW_MESSAGE_IN_PANEL_FETCHED", "ADD_NEW_START_CHAT_GROUP", "REMOVE_START_CHAT_GROUP", "START_CHAT_GROUP", "ADD_NEW_START_CHAT_GROUP_FAIL", "USER_SELECTED", "WEBSOCKET_FETCHED", "getMessageItems", "chatItems", "showAvatar", "messageItem", "showavatar", "createdDate", "Date", "toLocaleString", "reverse", "getChatList", "chatItem", "lastMessage", "unread", "groupchat", "groupChat", "updatedDate", "createLoadChatContainerRequest", "createChatMessageRequest", "usernames", "createCheckUsernameExistedRequest", "createWaitingChatHeaderRequest", "initialWebSocket", "webSocket", "Sockette", "timeout", "maxAttempts", "onopen", "onmessage", "e", "JSON", "parse", "chatList", "chatReducer", "userSelected", "changeMessageItems", "unshift", "temp", "splice", "tempo", "receivedNewMessage", "fetchedChatlist", "reloadChatList", "receivedNewChatSession", "userFullname", "fullName", "receivedUserOnline", "receivedUserOffline", "onreconnect", "onmaximum", "onclose", "onerror", "closeWebSocket", "close", "loadChatList", "chatlist", "header", "json", "setTimeout", "specialLoadChatContainer", "messageHeader", "receivedChatlist", "changeMessageHeader", "title", "addNewUserChatGroup", "existed", "startChatGroupList", "receiveNewUserChatGroup", "userSelectedKeys", "initialState", "startChatGroupError", "startChatGroupErrorMessage", "addFriendError", "addFriendErrorMessage", "addFriendPopup", "CHANGE_TAB", "REGISTER_SUCCEEDED", "USER_PROFILE", "CHANGE_STATUS", "register", "user", "callRegisterApi", "success", "registerSucceeded", "getProfile", "userFullName", "userStatus", "receivedUserProfile", "activeTabKey", "appReducer", "combineReducers", "state", "action", "popupstate", "userReducer", "toString", "rootReducer", "undefined", "FormItem", "Form", "Item", "NormalLoginForm", "props", "handleSubmit", "preventDefault", "form", "validateFields", "values", "history", "serverValidation", "visible", "validateStatus", "errorMsg", "getFieldDecorator", "this", "validation", "onSubmit", "rules", "required", "prefix", "style", "color", "placeholder", "help", "htmlType", "LoginForm", "withRouter", "NormalRegisterForm", "confirmDirty", "err", "password", "handleConfirmBlur", "value", "target", "setState", "compareToFirstPassword", "rule", "callback", "getFieldValue", "validateToNextPassword", "force", "validator", "onBlur", "RegisterForm", "connect", "TabPane", "Tabs", "Portal", "handleTabChanged", "activeKey", "changeTab", "id", "src", "alt", "onChange", "tab", "key", "to", "Profile", "componentDidMount", "status_text", "componentDidUpdate", "status_box_state", "refs", "statusInput", "focus", "logOut", "logout", "openStatusBoxStateStatus", "closeStatusBoxStateStatus", "changeUserStatus", "onChangeStatus", "render", "onClick", "onPressEnter", "ref", "href", "fontSize", "createChangeStatusRequest", "Avatar", "CustomAvatar", "customClassName", "email", "default", "show", "StartChatGroup", "showModal", "handleOk", "startNewChatGroup", "handleCancel", "addMoreUsername", "un", "$", "val", "handleRemoveUsername", "removeUserChatGroup", "width", "onOk", "onCancel", "okText", "cancelText", "shape", "marginBottom", "marginTop", "map", "closable", "onClose", "indexOf", "ChatList", "handleChangeChatItem", "event", "chat", "menuaction", "autoHide", "autoHideTimeout", "autoHideDuration", "theme", "mode", "onSelect", "selectedKeys", "overflow", "paddingTop", "ChatHeader", "AddFriend", "$add", "changeStateAddFriendPopup", "AddressBook", "current", "newselect", "handleCurrentChange", "bind", "handleNewChange", "defaultSelectedKeys", "ChatItem", "handleItemClick", "showDate", "cssClass", "cssContentClass", "date", "MessagePanel", "scrollToBottom", "messagesEnd", "scrollIntoView", "behavior", "el", "Sider", "Layout", "TextArea", "Input", "Main", "componentWillUnmount", "handleMainMenuChange", "handleMessageEnter", "keyCode", "which", "shiftKey", "submitChatMessage", "handleSendClick", "txtMsg", "height", "breakpoint", "collapsedWidth", "onBreakpoint", "onCollapse", "padding", "rows", "createStore", "applyMiddleware", "thunkMiddleware", "window", "provider", "exact", "path", "component", "ReactDOM", "document", "getElementById"
    ],
    "mappings": "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",
    "file": "static/js/main.890fc6a2.chunk.js", "sourcesContent": [
    "export const setUserIdToStorage = userId => sessionStorage.setItem(\"userId\", userId);\n\nexport const getUserIdFromStorage = () => sessionStorage.getItem(\"userId\");\n\nexport const setJwtToStorage = jwt => sessionStorage.setItem(\"jwt\", jwt);\n\nexport const getJwtFromStorage = () => sessionStorage.getItem(\"jwt\");\n\nexport const clearStorage = () => sessionStorage.clear();\n\nexport const isEmptyString = prop => prop == null || prop === \"\";\n\nexport const isAuthenticated = () => isEmptyString(getJwtFromStorage());\n\n", "import axios from \"axios\";\nimport {message} from \"antd\";\nimport {getJwtFromStorage, isEmptyString} from \"../utils/utils\";\n\nexport const host = \"http://localhost:8080\";\nexport const ws_host = \"ws://localhost:8090/\";\nconst auth_type = \"Bearer\";\n\n// Set config defaults when creating the instance\nconst instance = axios.create({baseURL: host});\n\ninstance.interceptors.request.use(config => config, error => Promise.reject(error));\n\n// Add a response interceptor\ninstance.interceptors.response.use(function (response) {\n    // Do something with response data\n\n    return response;\n}, function (error) {\n    //ignore ping\n    if (!error.request.responseURL.endsWith(\"api/protected/ping\")) {\n        if (error.response.data.error.message) {\n            message.error(error.response.data.error.message);\n        } else {\n            message.error(\"Ooops, The server was unable to complete your request. We will be back soon :(\");\n        }\n    }\n    return Promise.reject(error);\n});\n\nexport const api = {\n    get: url => {\n        let jwt = !isEmptyString(getJwtFromStorage()) ? `${auth_type} ${jwt}` : \"\";\n        return instance.get(`${url}`, {headers: {\"Authorization\": jwt}});\n    },\n\n    post: (url, req) => {\n        let jwt = !isEmptyString(getJwtFromStorage()) ? `${auth_type} ${jwt}` : \"\";\n        return instance.post(`${url}`, req, {headers: {\"Authorization\": jwt}});\n    },\n\n    put: (url, req) => instance.put(`${url}`, req),\n\n    patch: (url, req) => instance.patch(`${url}`, req),\n\n    delete: url => instance.delete(`${url}`)\n};\n", "import {store} from \"../index\";\nimport {loadChatContainer, startNewChatSingle} from \"./Chat\";\nimport {api} from \"../api/api\";\nimport {isEmptyString} from \"../utils/utils\";\nimport deepcopy from \"deepcopy\";\n\nexport const ADDRESS_BOOK_FETCHED = \"addressBook.ADDRESSBOOK_FETCHED\";\nexport const ADD_FRIEND_FAIL = \"addressBook.ADD_FRIEND_FAIL\";\nexport const ADD_FRIEND = \"addressBook.ADD_FRIEND\";\nexport const ADD_FRIEND_POPUP_STATE = \"addressBook.ADD_FRIEND_POPUP_STATE\";\nexport const EMPTY = \"addressBook.EMPTY\";\n\nexport function loadAddressBookList() {\n    return dispatch => getAddressBookList().then(result => {\n        dispatch(receivedAddressBook(result));\n    });\n}\n\nexport function receivedAddressBook(addressbook) {\n    const fetchedAddressBook = addressbook;\n    let fetchedNewAddressBookList = store.getState().addressBookReducer.newAddressBookList;\n    return {\n        type: ADDRESS_BOOK_FETCHED,\n        fetchedAddressBookList: fetchedAddressBook,\n        fetchedNewAddressBookList: fetchedNewAddressBookList\n    };\n}\n\nexport function handleChangeAddressBook(userId) {\n    return dispatch => {\n        api.post(`/api/protected/sessionidbyuserid`, createGetSessionIdRequest(userId)).then(result => {\n            dispatch(receivedSessionId(result, userId));\n        });\n    };\n}\n\nexport function receivedSessionId(result, userId) {\n    if (result.data.data.sessionId !== \"-1\") {\n        store.dispatch(loadChatContainer(result.data.data.sessionId));\n    } else {\n        store.dispatch(startNewChatSingle(userId));\n    }\n    return {type: EMPTY};\n}\n\nexport function addNewFriend(userName) {\n    if (isEmptyString(userName)) {\n        let error = \"Please input username :(\";\n        return {type: ADD_FRIEND_FAIL, error: error};\n    } else {\n        return dispatch => api.post(`/api/protected/addfriend`, createAddFriendRequest(userName)).then(result => {\n            dispatch(receiveAddFriendResult(result));\n        });\n    }\n}\n\nexport function receiveAddFriendResult(result) {\n    if (result.data.error) {\n        let error = result.data.error.message;\n        return {type: ADD_FRIEND_FAIL, error: error};\n    }\n\n    let newAddressBookList = deepcopy(store.getState().addressBookReducer.newAddressBookList);\n    let newFriend = {\n        name: result.data.data.item.name,\n        userId: result.data.data.item.userId,\n        avatar: processUsernameForAvatar(result.data.data.item.name),\n        status: result.data.data.item.status,\n        isOnline: result.data.data.item.online\n    };\n\n    newAddressBookList.push(newFriend);\n    return {type: ADD_FRIEND, newAddressBookList: newAddressBookList};\n}\n\nexport function changeStateAddFriendPopup(state) {\n    return {type: ADD_FRIEND_POPUP_STATE, popupstate: state};\n}\n\nexport function changeUserOnlineStatus(userId, status) {\n    let fetchedAddressBook = deepcopy(store.getState().addressBookReducer.addressBookList);\n    let fetchedNewAddressBook = deepcopy(store.getState().addressBookReducer.newAddressBookList);\n    for (let i = 0; i < fetchedAddressBook.length; i++) {\n        if (fetchedAddressBook[i].userId === userId) {\n            fetchedAddressBook[i].isOnline = status;\n        }\n    }\n    for (let j = 0; j < fetchedNewAddressBook.length; j++) {\n        if (fetchedNewAddressBook[j].userId === userId) {\n            fetchedNewAddressBook[j].isOnline = status;\n        }\n    }\n    const onlineResults = [];\n    const offlineResults = [];\n    for (let index = 0; index < fetchedAddressBook.length; ++index) {\n        if (fetchedAddressBook[index].isOnline) {\n            onlineResults.push(fetchedAddressBook[index]);\n        } else {\n            offlineResults.push(fetchedAddressBook[index]);\n        }\n    }\n\n    sortOnOff(onlineResults, offlineResults);\n    fetchedAddressBook = onlineResults.concat(offlineResults);\n\n    return {\n        type: ADDRESS_BOOK_FETCHED,\n        fetchedAddressBookList: fetchedAddressBook,\n        fetchedNewAddressBookList: fetchedNewAddressBook\n    };\n}\n\nfunction processUsernameForAvatar(username) {\n    return username.charAt(0) + \" \" + username.charAt(1);\n}\n\nfunction sortOnOff(onlineResults, offlineResults) {\n    const compare = (a, b) => {\n        if (a.name < b.name) return -1;\n        if (a.name > b.name) return 1;\n        return 0;\n    };\n\n    onlineResults.sort(compare);\n    offlineResults.sort(compare);\n}\n\nfunction getAddressBookList() {\n    return new Promise(resolve => {\n        api.get(`/api/protected/addressbook`).then(res => {\n            const items = res.data.data.items;\n            let results = [];\n            const onlineResults = [];\n            const offlineResults = [];\n            for (let index = 0; index < items.length; ++index) {\n                const addressbookItem = {\n                    name: items[index].name,\n                    userId: items[index].userId,\n                    avatar: processUsernameForAvatar(items[index].name),\n                    status: items[index].status,\n                    isOnline: items[index].online\n                };\n                if (items[index].online) {\n                    onlineResults.push(addressbookItem);\n                } else {\n                    offlineResults.push(addressbookItem);\n                }\n                sortOnOff(onlineResults, offlineResults);\n\n                results = onlineResults.concat(offlineResults);\n            }\n            resolve(results);\n        });\n    });\n}\n\nfunction createAddFriendRequest(username) {\n    return {username: username};\n}\n\nfunction createGetSessionIdRequest(userId) {\n    return {userId: userId};\n}\n", "import {store} from \"../index\";\nimport {api, ws_host} from \"../api/api\";\nimport Sockette from \"sockette\";\nimport {getJwtFromStorage, getUserIdFromStorage, isEmptyString} from \"../utils/utils\";\nimport deepcopy from \"deepcopy\";\nimport {message} from \"antd/lib/index\";\nimport {changeUserOnlineStatus} from \"./AddressBook\";\nimport {statusNotification} from \"../components/StatusNotification\";\n\nexport const EMPTY = \"chatlist.EMPTY\";\nexport const CHATLIST_FETCHED = \"chatlist.CHATLIST_FETCHED\";\nexport const CHATLIST_REFETCHED = \"chatlist.CHATLIST_REFETCHED\";\nexport const MESSAGE_HEADER_FETCHED = \"chatlist.MESSAGE_HEADER_FETCHED\";\nexport const MESSAGE_PANEL_FETCHED = \"chatlist.MESSAGE_PANEL_FETCHED\";\nexport const NEW_MESSAGE_IN_PANEL_FETCHED = \"chatlist.NEW_MESSAGE_IN_PANEL_FETCHED\";\nexport const ADD_NEW_START_CHAT_GROUP = \"chatlist.ADD_NEW_START_CHAT_GROUP\";\nexport const REMOVE_START_CHAT_GROUP = \"chatlist.REMOVE_START_CHAT_GROUP\";\nexport const START_CHAT_GROUP = \"chatlist.START_CHAT_GROUP\";\nexport const START_CHAT_SINGLE = \"chatlist.START_CHAT_SINGLE\";\nexport const ADD_NEW_START_CHAT_GROUP_FAIL = \"chatlist.ADD_NEW_START_CHAT_GROUP_FAIL\";\nexport const USER_SELECTED = \"chatlist.USER_SELECTED\";\nexport const WEBSOCKET_FETCHED = \"chatlist.WEBSOCKET_FETCHED\";\n\nconst processUsernameForAvatar = username => `${username.charAt(0)} ${username.charAt(1)}`;\n\nconst getMessageItems = chatItems => {\n    const userId = getUserIdFromStorage();\n    const results = [];\n    for (let i = 0; i < chatItems.length; i++) {\n\n        let type = 1;\n        if (chatItems[i].userId !== userId) {\n            type = 2;\n        }\n        let showAvatar = true;\n        if (i > 0 && results[i - 1].type === type && results[i - 1].userId === chatItems[i].userId) {\n            showAvatar = false;\n        }\n        const messageItem = {\n            message: chatItems[i].message,\n            type: type,\n            showavatar: showAvatar,\n            avatar: processUsernameForAvatar(chatItems[i].name),\n            userId: chatItems[i].userId,\n            createdDate: new Date(chatItems[i].createdDate).toLocaleString()\n        };\n        results.push(messageItem);\n    }\n    results.reverse();\n    return results;\n};\n\nconst getChatList = () => new Promise(resolve => {\n    api.get(`/api/protected/chatlist`).then(res => {\n        const items = res.data.data.items;\n        const results = [];\n        for (let index = 0; index < items.length; ++index) {\n            const chatItem = {\n                name: items[index].name,\n                sessionId: items[index].sessionId,\n                avatar: processUsernameForAvatar(items[index].name),\n                lastMessage: items[index].lastMessage,\n                unread: items[index].unread,\n                groupchat: items[index].groupChat,\n                updatedDate: items[index].updatedDate\n            };\n            results.push(chatItem);\n        }\n        results.sort((a, b) => {\n            if (a.updatedDate < b.updatedDate) return 1;\n            if (a.updatedDate > b.updatedDate) return -1;\n            return 0;\n        });\n        resolve(results);\n    });\n});\n\nconst createLoadChatContainerRequest = sessionId => ({\n    type: \"CHAT_ITEMS_REQUEST\",\n    sessionId: sessionId\n});\n\nconst createChatMessageRequest = (sessionId, message, waitingGroupUsernames) => ({\n    type: \"CHAT_MESSAGE_REQUEST\",\n    sessionId: sessionId,\n    message: message,\n    usernames: waitingGroupUsernames,\n    groupChat: sessionId === \"-1\"\n});\n\nconst createCheckUsernameExistedRequest = username => ({username: username});\n\nconst createWaitingChatHeaderRequest = usernames => ({usernames: usernames});\n\nexport function initialWebSocket() {\n    const jwt = getJwtFromStorage();\n    const webSocket = new Sockette(ws_host + \"?jwt=\" + jwt, {\n        timeout: 5e3,\n        maxAttempts: 10,\n\n        onopen: () => {},\n\n        onmessage: e => {\n            const data = JSON.parse(e.data);\n            switch (data.type) {\n                case \"CHAT_ITEMS_RESPONSE\":\n                    store.dispatch(changeMessageItems(data.chatItems, data.sessionId));\n                    break;\n                case \"CHAT_MESSAGE_RESPONSE\":\n                    store.dispatch(receivedNewMessage(data));\n                    break;\n                case \"CHAT_NEW_SESSION_RESPONSE\":\n                    store.dispatch(receivedNewChatSession(data));\n                    break;\n                case \"USER_ONLINE_RESPONSE\":\n                    store.dispatch(receivedUserOnline(data));\n                    break;\n                case \"USER_OFFLINE_RESPONSE\":\n                    store.dispatch(receivedUserOffline(data));\n                    break;\n            }\n        },\n\n        onreconnect: e => console.log(\"Reconnecting...\", e),\n\n        onmaximum: e => console.log(\"Stop Attempting!\", e),\n\n        onclose: e => console.log(\"Closed!\", e),\n\n        onerror: e => console.log(\"Error:\", e)\n    });\n    //ws.close(); // graceful shutdown\n    return {type: WEBSOCKET_FETCHED, webSocket: webSocket};\n}\n\nexport function closeWebSocket() {\n    store.getState().chatReducer.webSocket.close();\n    return {type: EMPTY};\n}\n\nexport function loadChatList() {\n    return dispatch => getChatList().then(result => {\n        dispatch(receivedChatlist(result));\n    });\n}\n\nexport function reloadChatList() {\n    return dispatch => getChatList().then(result => {\n        dispatch(receivedReloadChatlist(result));\n    });\n}\n\nexport function loadChatContainer(sessionId) {\n    store.getState().chatReducer.webSocket.json(createLoadChatContainerRequest(sessionId));\n    return {type: EMPTY};\n}\n\nexport function specialLoadChatContainer(sessionId) {\n    let chatList = [];\n    (() => {\n        try {\n            store.getState().chatReducer.webSocket.json(createLoadChatContainerRequest(sessionId));\n            if (store.getState().chatReducer.chatList.length <= 0) { return; }\n            chatList = deepcopy(store.getState().chatReducer.chatList);\n            for (let i = 0; i < chatList.length; i++) {\n                if (chatList[i].sessionId === sessionId) {\n                    chatList[i].unread = 0;\n                }\n            }\n        } catch (e) {\n            setTimeout(() => {console.log(e);}, 500);\n        }\n    })();\n\n    return {type: EMPTY};\n}\n\nexport function submitChatMessage(message) {\n    let sessionId = store.getState().chatReducer.currentSessionId;\n    let waitingGroupUsernames = store.getState().chatReducer.waitingGroupUsernames;\n    store.getState().chatReducer.webSocket.json(createChatMessageRequest(sessionId, message, waitingGroupUsernames));\n    return {type: EMPTY};\n}\n\nexport function receivedChatlist(chatlist) {\n    const fetchedChatlist = chatlist;\n    let header = {};\n    if (fetchedChatlist.length > 0) {\n        header = {\n            \"title\": fetchedChatlist[0].name,\n            \"avatar\": fetchedChatlist[0].avatar,\n            \"groupchat\": fetchedChatlist[0].groupchat\n        };\n        store.dispatch(specialLoadChatContainer(fetchedChatlist[0].sessionId));\n    }\n\n    return {type: CHATLIST_FETCHED, fetchedChatlist: fetchedChatlist, messageHeader: header};\n}\n\nexport function receivedReloadChatlist(chatlist) {\n    return {type: CHATLIST_REFETCHED, fetchedChatlist: chatlist};\n}\n\nexport function receivedNewMessage(message) {\n    let currentSessionId = store.getState().chatReducer.currentSessionId;\n    let userId = getUserIdFromStorage();\n    let userSelected = store.getState().chatReducer.userSelected;\n    let messageItems = [];\n    if (store.getState().chatReducer.messageItems.length > 0) {\n        messageItems = deepcopy(store.getState().chatReducer.messageItems);\n    }\n\n    let chatList = [];\n    if (store.getState().chatReducer.chatList.length > 0) {\n        chatList = deepcopy(store.getState().chatReducer.chatList);\n    }\n\n    if (currentSessionId === message.sessionId) {\n        let type = 1;\n        if (message.userId !== userId) {\n            type = 2;\n        }\n        let showAvatar = true;\n        if (messageItems.length > 0 && messageItems[0].type === type && messageItems[0].userId === message.userId) {\n            showAvatar = false;\n        }\n        let messageItem = {\n            message: message.message,\n            type: type,\n            showavatar: showAvatar,\n            avatar: processUsernameForAvatar(message.name),\n            userId: message.userId,\n            createdDate: new Date(message.createdDate).toLocaleString()\n        };\n        messageItems.unshift(messageItem);\n\n        //re-arrange chat list\n        for (let i = 0; i < chatList.length; i++) {\n            if (chatList[i].sessionId === message.sessionId) {\n                userSelected = message.sessionId;\n                chatList[i].lastMessage = message.message;\n                const temp = chatList[i];\n                chatList.splice(i, 1);\n                chatList.unshift(temp);\n                break;\n            }\n        }\n\n    } else {\n        //re-arrange chat list\n        for (let j = 0; j < chatList.length; j++) {\n            if (chatList[j].sessionId === message.sessionId) {\n                chatList[j].lastMessage = message.message;\n                chatList[j].unread = chatList[j].unread + 1;\n                const tempo = chatList[j];\n                chatList.splice(j, 1);\n                chatList.unshift(tempo);\n                break;\n            }\n        }\n\n    }\n    return {\n        type: NEW_MESSAGE_IN_PANEL_FETCHED,\n        messageItems: messageItems,\n        chatList: chatList,\n        userSelected: userSelected\n    };\n}\n\nexport function receivedNewChatSession(message) {\n    if (store.getState().chatReducer.currentSessionId === \"-1\") {\n        store.dispatch(loadChatContainer(message.sessionId));\n    }\n\n    store.dispatch(reloadChatList());\n    store.dispatch(userSelected(message.sessionId));\n    return {type: EMPTY};\n}\n\nexport function changeMessageItems(chatItems, sessionId) {\n    const messageItems = getMessageItems(chatItems);\n    let chatList = [];\n    if (store.getState().chatReducer.chatList.length > 0) {\n        chatList = deepcopy(store.getState().chatReducer.chatList);\n        for (let i = 0; i < chatList.length; i++) {\n            if (chatList[i].sessionId === sessionId) {\n                chatList[i].unread = 0;\n            }\n        }\n        store.dispatch(userSelected(sessionId));\n    }\n    return {type: MESSAGE_PANEL_FETCHED, messageItems: messageItems, currentSessionId: sessionId, chatList: chatList};\n}\n\nexport function changeMessageHeader(title, avatar, groupchat) {\n    const header = {\n        title: title,\n        avatar: avatar,\n        groupchat: groupchat\n    };\n    return {type: MESSAGE_HEADER_FETCHED, messageHeader: header};\n}\n\nexport function addNewUserChatGroup(userName) {\n    if (isEmptyString(userName)) {\n        let error = \"Please input username :(\";\n        return {type: ADD_NEW_START_CHAT_GROUP_FAIL, error: error};\n    }\n    return dispatch => api.post(`/api/protected/usernameexisted`, createCheckUsernameExistedRequest(userName)).then(result => {\n        dispatch(receiveNewUserChatGroup(result));\n    });\n}\n\nexport function removeUserChatGroup(userName) {\n    let startChatGroupList = deepcopy(store.getState().chatReducer.startChatGroupList);\n    let index = startChatGroupList.indexOf(userName);\n    if (index > -1) {\n        startChatGroupList.splice(index, 1);\n    }\n\n    return {type: REMOVE_START_CHAT_GROUP, startChatGroupList: startChatGroupList};\n\n}\n\nexport function receiveNewUserChatGroup(result) {\n    if (!result.data.data.existed) {\n        let error = \"Username is not existed :(\";\n        return {type: ADD_NEW_START_CHAT_GROUP_FAIL, error: error};\n    }\n\n    let startChatGroupList = deepcopy(store.getState().chatReducer.startChatGroupList);\n    startChatGroupList.push(result.data.data.username);\n    return {type: ADD_NEW_START_CHAT_GROUP, startChatGroupList: startChatGroupList};\n}\n\nexport function startNewChatGroup() {\n    if (store.getState().chatReducer.startChatGroupList.length <= 1) {\n        message.error(\"Sorry, but a group chat must contains more than 2 people :(\");\n        return {type: EMPTY};\n    }\n\n    let messageItems = [];\n    let waitingGroupUsernames = store.getState().chatReducer.startChatGroupList;\n    let currentSessionId = \"-1\";\n    api.post(`/api/protected/waitingchatheader`, createWaitingChatHeaderRequest(waitingGroupUsernames)).then(res => {\n        store.dispatch(changeMessageHeader(res.data.data.title, \"\", true));\n    });\n    return {\n        type: START_CHAT_GROUP,\n        messageItems: messageItems,\n        waitingGroupUsernames: waitingGroupUsernames,\n        currentSessionId: currentSessionId\n    };\n}\n\nexport function startNewChatSingle(userId) {\n    let messageItems = [];\n    let waitingGroupUsernames = [userId];\n    let currentSessionId = \"-1\";\n    console.log(userId);\n    return {\n        type: START_CHAT_SINGLE,\n        messageItems: messageItems,\n        waitingGroupUsernames: waitingGroupUsernames,\n        currentSessionId: currentSessionId\n    };\n}\n\nexport function receivedUserOnline(res) {\n    const userId = res.userId;\n    const userFullname = res.fullName;\n    statusNotification.onlineNotification(userFullname);\n    store.dispatch(changeUserOnlineStatus(userId, true));\n    return {type: EMPTY};\n}\n\nexport function receivedUserOffline(res) {\n    const userId = res.userId;\n    const userFullname = res.fullName;\n    statusNotification.offlineNotification(userFullname);\n    store.dispatch(changeUserOnlineStatus(userId, false));\n    return {type: EMPTY};\n}\n\nexport function userSelected(sessionId) {\n    console.log(sessionId);\n    const userSelectedKeys = [sessionId];\n    return {type: USER_SELECTED, userSelectedKeys: userSelectedKeys};\n}\n", "import {notification} from \"antd\";\nimport Ravatar from \"react-avatar\";\nimport React from \"react\";\n\nclass StatusNotification extends React.Component {\n    onlineNotification = name => notification.open({\n        description: `${name} is Online`,\n        className: \"online-notification\",\n        //duration: 0,\n        icon: <Ravatar name={this.processUsernameForAvatar(name)} className=\"notification-icon\" size=\"30\"/>\n    });\n\n    offlineNotification = name => notification.open({\n        description: `${name} is Offline`,\n        className: \"offline-notification\",\n        //duration: 0,\n        icon: <Ravatar name={this.processUsernameForAvatar(name)} className=\"notification-icon\" size=\"30\"/>\n    });\n\n    processUsernameForAvatar = username => `${username.charAt(0)} ${username.charAt(1)}`;\n}\n\nexport const statusNotification = new StatusNotification();\n", "import {\n    ADD_NEW_START_CHAT_GROUP,\n    ADD_NEW_START_CHAT_GROUP_FAIL,\n    CHATLIST_FETCHED,\n    CHATLIST_REFETCHED,\n    MESSAGE_HEADER_FETCHED,\n    MESSAGE_PANEL_FETCHED,\n    NEW_MESSAGE_IN_PANEL_FETCHED,\n    REMOVE_START_CHAT_GROUP,\n    START_CHAT_GROUP,\n    START_CHAT_SINGLE,\n    USER_SELECTED,\n    WEBSOCKET_FETCHED\n} from \"../actions/Chat\";\n\nconst initialState = {\n    chatList: [],\n    messageItems: [],\n    messageHeader: {},\n    webSocket: null,\n    currentSessionId: null,\n    startChatGroupList: [],\n    startChatGroupError: false,\n    startChatGroupErrorMessage: \"\",\n    waitingGroupUsernames: [],\n    userSelectedKeys: []\n};\n\nexport default function reduce(state = initialState, action) {\n    switch (action.type) {\n        case CHATLIST_FETCHED:\n            return {\n                ...state,\n                chatList: action.fetchedChatlist,\n                messageHeader: action.messageHeader\n\n            };\n\n        case CHATLIST_REFETCHED:\n            return {\n                ...state,\n                chatList: action.fetchedChatlist\n            };\n\n        case USER_SELECTED:\n            return {\n                ...state,\n                userSelectedKeys: action.userSelectedKeys\n            };\n\n        case ADD_NEW_START_CHAT_GROUP_FAIL:\n            return {\n                ...state,\n                startChatGroupError: true,\n                startChatGroupErrorMessage: action.error\n            };\n\n        case ADD_NEW_START_CHAT_GROUP:\n            return {\n                ...state,\n                startChatGroupError: false,\n                startChatGroupErrorMessage: \"\",\n                startChatGroupList: action.startChatGroupList\n            };\n\n        case REMOVE_START_CHAT_GROUP:\n            return {\n                ...state,\n                startChatGroupList: action.startChatGroupList\n            };\n\n        case START_CHAT_GROUP:\n            return {\n                ...state,\n                messageItems: action.messageItems,\n                waitingGroupUsernames: action.waitingGroupUsernames,\n                currentSessionId: action.currentSessionId,\n                startChatGroupList: []\n            };\n\n        case START_CHAT_SINGLE:\n            return {\n                ...state,\n                messageItems: action.messageItems,\n                waitingGroupUsernames: action.waitingGroupUsernames,\n                currentSessionId: action.currentSessionId\n            };\n\n        case MESSAGE_PANEL_FETCHED:\n            return {\n                ...state,\n                messageItems: action.messageItems,\n                waitingGroupUsernames: [],\n                currentSessionId: action.currentSessionId,\n                chatList: action.chatList,\n                userSelected: action.userSelected\n            };\n\n        case NEW_MESSAGE_IN_PANEL_FETCHED:\n            return {\n                ...state,\n                messageItems: action.messageItems,\n                chatList: action.chatList\n            };\n\n        case MESSAGE_HEADER_FETCHED:\n            return {\n                ...state,\n                messageHeader: action.messageHeader\n            };\n\n        case WEBSOCKET_FETCHED:\n            return {\n                ...state,\n                webSocket: action.webSocket\n            };\n\n        default:\n            return state;\n    }\n}\n", "import {ADD_FRIEND, ADD_FRIEND_FAIL, ADD_FRIEND_POPUP_STATE, ADDRESS_BOOK_FETCHED} from \"../actions/AddressBook\";\n\nconst initialState = {\n    addressBookList: [],\n    newAddressBookList: [],\n    addFriendError: false,\n    addFriendErrorMessage: \"\",\n    addFriendPopup: false\n};\n\nexport default function reduce(state = initialState, action) {\n    switch (action.type) {\n        case ADDRESS_BOOK_FETCHED:\n            return {\n                ...state,\n                addressBookList: action.fetchedAddressBookList,\n                newAddressBookList: action.fetchedNewAddressBookList\n            };\n\n        case ADD_FRIEND:\n            return {\n                ...state,\n                addFriendError: false,\n                addFriendErrorMessage: \"\",\n                newAddressBookList: action.newAddressBookList,\n                addFriendPopup: false\n            };\n\n        case ADD_FRIEND_FAIL:\n            return {\n                ...state,\n                addFriendError: true,\n                addFriendErrorMessage: action.error\n            };\n\n        case ADD_FRIEND_POPUP_STATE:\n            return {\n                ...state,\n                addFriendPopup: action.popupstate\n            };\n\n        default:\n            return state;\n    }\n}\n", "import {api} from \"../api/api\";\nimport {message} from \"antd\";\n\nexport const CHANGE_TAB = \"portal.CHANGE_TAB\";\nexport const REGISTER_SUCCEEDED = \"user.REGISTER_SUCCEEDED\";\nexport const REGISTER_FAILED = \"user.REGISTER_FAILED\";\nexport const USER_PROFILE = \"user.USER_PROFILE\";\nexport const CHANGE_STATUS = \"user.CHANGE_STATUS\";\n\nexport function changeTab(activeTabKey) {\n    return {type: CHANGE_TAB, activeTabKey: activeTabKey};\n}\n\nexport function register(user) {\n    return dispatch => callRegisterApi(user).then(result => {\n        dispatch(registerSucceeded(result.data));\n    });\n}\n\nexport function logout() {\n    return {type: \"USER_LOGOUT\"};\n}\n\nfunction callRegisterApi(user) {\n    return new Promise(resolve => {\n        api.post(`/api/public/user`, user).then(res => resolve(res));\n    });\n}\n\nexport function registerSucceeded(user) {\n    message.success(\"Register successfully. You can proceed to login with your account :)\");\n    return {type: REGISTER_SUCCEEDED, user: user};\n}\n\nexport function receivedUserProfile(result) {\n    let status = \"You are online\";\n    if (result.data.data.status !== \"\") {\n        status = result.data.data.status;\n    }\n    return {\n        type: USER_PROFILE,\n        userName: result.data.data.userName,\n        userFullName: result.data.data.userFullName,\n        userStatus: status\n    };\n}\n\nexport function getProfile() {\n    return dispatch => api.get(`/api/protected/user`).then(res => {\n        dispatch(receivedUserProfile(res));\n    });\n}\n\nexport function changeUserStatus(status) {\n    let userStatus = \"You are online\";\n    if (status !== \"\") {\n        userStatus = status;\n    }\n    api.post(`/api/protected/status`, createChangeStatusRequest(status));\n    return {type: CHANGE_STATUS, userStatus: userStatus};\n}\n\nfunction createChangeStatusRequest(status) {\n    return {status: status};\n}\n", "import {CHANGE_STATUS, CHANGE_TAB, REGISTER_SUCCEEDED, USER_PROFILE} from \"../actions/User\";\n\nconst initialState = {\n    user: {},\n    activeTabKey: \"1\",\n    userFullName: \"\",\n    userName: \"\",\n    userStatus: \"\"\n};\n\nexport default function reduce(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_TAB:\n            console.log(action.activeTabKey);\n            return {\n                ...state,\n                activeTabKey: action.activeTabKey.toString()\n            };\n\n        case REGISTER_SUCCEEDED:\n            return {\n                ...state,\n                user: action.user,\n                activeTabKey: \"1\"\n            };\n\n        case USER_PROFILE:\n            return {\n                ...state,\n                userFullName: action.userFullName,\n                userName: action.userName,\n                userStatus: action.userStatus\n            };\n\n        case CHANGE_STATUS:\n            return {\n                ...state,\n                userStatus: action.userStatus\n            };\n\n        default:\n            return state;\n    }\n}\n", "import {combineReducers} from \"redux\";\nimport chatReducer from \"./Chat\";\nimport addressBookReducer from \"./AddressBook\";\nimport userReducer from \"./User\";\n\nconst appReducer = combineReducers({chatReducer, addressBookReducer, userReducer});\n\nconst rootReducer = (state, action) => {\n    if (action.type === \"USER_LOGOUT\") {\n        state = undefined;\n    }\n    return appReducer(state, action);\n};\n\nexport default rootReducer;\n", "import React from \"react\";\nimport {Button, Form, Icon, Input} from \"antd\";\nimport {withRouter} from \"react-router-dom\";\nimport {api} from \"../api/api\";\nimport {setJwtToStorage, setUserIdToStorage} from \"../utils/utils\";\n\nconst FormItem = Form.Item;\n\nclass NormalLoginForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            serverValidation: {\n                visible: false,\n                validateStatus: \"error\",\n                errorMsg: \"Invalid username or password!\"\n            }\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((error, values) => {\n            if (error) return;\n\n            api.post(`/signin`, values).then(res => {\n                setJwtToStorage(res.data.data.jwt);\n                setUserIdToStorage(res.data.data.userId);\n                this.props.history.push(\"/\");\n            });\n        });\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const validation = this.state.serverValidation;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <FormItem>\n                    {getFieldDecorator(\"userName\", {\n                        rules: [{required: true, message: \"Please input your username!\"}]\n                    })(\n                        <Input prefix={<Icon type=\"user\" style={{color: \"rgba(0,0,0,.25)\"}}/>} placeholder=\"Username\"/>\n                    )}\n                </FormItem>\n                <FormItem>\n                    {getFieldDecorator(\"password\", {\n                        rules: [{required: true, message: \"Please input your Password!\"}]\n                    })(\n                        <Input prefix={<Icon type=\"lock\" style={{color: \"rgba(0,0,0,.25)\"}}/>} type=\"password\"\n                            placeholder=\"Password\"/>\n                    )}\n                </FormItem>\n                {validation.visible && (\n                    <FormItem validateStatus={validation.validateStatus} help={validation.errorMsg}/>\n                )}\n                <FormItem>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">Log in</Button>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nexport const LoginForm = withRouter(Form.create()(NormalLoginForm));\n", "import React from \"react\";\nimport {Button, Form, Icon, Input} from \"antd\";\nimport {connect} from \"react-redux\";\nimport {register} from \"../actions/User\";\n\nconst FormItem = Form.Item;\n\nclass NormalRegisterForm extends React.Component {\n    state = {confirmDirty: false};\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (err) { return; }\n\n            console.log(\"Received values of form: \", values);\n            const user = {\n                fullName: values.fullName,\n                userName: values.userName,\n                password: values.password\n            };\n            this.props.register(user);\n        });\n    };\n\n    handleConfirmBlur = (e) => {\n        const value = e.target.value;\n        this.setState({confirmDirty: this.state.confirmDirty || !!value});\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && value !== form.getFieldValue(\"password\")) {\n            callback(\"Two passwords that you enter is inconsistent!\");\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && this.state.confirmDirty) {\n            form.validateFields([\"rePassword\"], {force: true});\n        }\n        callback();\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <FormItem>\n                    {getFieldDecorator(\"fullName\", {\n                        rules: [{required: true, message: \"Please input your Full Name!\"}]\n                    })(\n                        <Input prefix={<Icon type=\"idcard\" style={{color: \"rgba(0,0,0,.25)\"}}/>} placeholder=\"Fullname\"/>\n                    )}\n                </FormItem>\n                <FormItem>\n                    {getFieldDecorator(\"userName\", {\n                        rules: [{required: true, message: \"Please choose your username!\"}]\n                    })(\n                        <Input prefix={<Icon type=\"user\" style={{color: \"rgba(0,0,0,.25)\"}}/>} placeholder=\"Username\"/>\n                    )}\n                </FormItem>\n                <FormItem>\n                    {getFieldDecorator(\"password\", {\n                        rules: [\n                            {required: true, message: \"Please input your Password!\"},\n                            {validator: this.validateToNextPassword}\n                        ]\n                    })(\n                        <Input prefix={\n                            <Icon type=\"lock\" style={{color: \"rgba(0,0,0,.25)\"}}/>} type=\"password\" placeholder=\"Password\"/>\n                    )}\n                </FormItem>\n                <FormItem>\n                    {getFieldDecorator(\"rePassword\", {\n                        rules: [\n                            {required: true, message: \"Please re-input your Password!\"},\n                            {validator: this.compareToFirstPassword}\n                        ]\n                    })(\n                        <Input prefix={<Icon type=\"lock\" style={{color: \"rgba(0,0,0,.25)\"}}/>} type=\"password\"\n                            placeholder=\"Confirm Password\" onBlur={this.handleConfirmBlur}/>\n                    )}\n                </FormItem>\n                <FormItem>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">Register</Button>\n                </FormItem>\n            </Form>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({user: state.userReducer.user});\n\nconst mapDispatchToProps = dispatch => ({\n    register: user => dispatch(register(user))\n});\n\nexport const RegisterForm = connect(mapStateToProps, mapDispatchToProps)(Form.create()(NormalRegisterForm));\n", "import React from \"react\";\nimport {Tabs} from \"antd\";\nimport {LoginForm} from \"../components/LoginForm\";\nimport {RegisterForm} from \"../components/RegisterForm\";\nimport {connect} from \"react-redux\";\nimport {changeTab} from \"../actions/User\";\nimport {isAuthenticated} from \"../utils/utils\";\nimport {Redirect} from \"react-router-dom\";\n\nconst TabPane = Tabs.TabPane;\n\nclass Portal extends React.Component {\n\n    handleTabChanged = (activeKey) => this.props.changeTab(activeKey);\n\n    render() {\n        return !isAuthenticated()\n            ? <Redirect to=\"/\"/>\n            : <div id=\"portal-container\">\n                <div className=\"logo\"><img src=\"logo.png\" alt=\"logo.png\"/></div>\n                <div id=\"authen-panel\">\n                    <Tabs activeKey={this.props.activeTabKey} onChange={this.handleTabChanged}>\n                        <TabPane tab=\"Login\" key=\"1\">\n                            <LoginForm/>\n                        </TabPane>\n                        <TabPane tab=\"Register\" key=\"2\"><RegisterForm/></TabPane>\n                    </Tabs>\n                </div>\n            </div>;\n    }\n}\n\nconst mapStateToProps = state => ({activeTabKey: state.userReducer.activeTabKey});\n\nconst mapDispatchToProps = dispatch => ({\n    changeTab: activeKey => dispatch(changeTab(activeKey))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Portal);\n", "import React from \"react\";\nimport {Icon, Input} from \"antd\";\nimport {clearStorage, isEmptyString} from \"../utils/utils\";\nimport {api} from \"../api/api\";\nimport {withRouter} from \"react-router-dom\";\nimport {closeWebSocket} from \"../actions/Chat\";\nimport {connect} from \"react-redux\";\nimport {changeUserStatus, getProfile, logout} from \"../actions/User\";\n\nclass Profile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {status_box_state: true};\n    }\n\n    componentDidMount = () => {\n        this.props.getProfile();\n        this.setState({\n            ...this.state,\n            status_text: this.props.userStatus\n        });\n    };\n\n    componentDidUpdate = () => {\n        if (isEmptyString(this.state.status_text) && this.state.status_box_state) {\n            this.state.status_text = \"You are online\";\n            this.setState({\n                ...this.state,\n                status_text: this.state.status_text\n            });\n        }\n        if (this.refs.statusInput)\n            this.refs.statusInput.focus();\n    };\n\n    logOut = () =>\n        api.post(`/signout`).then(res => {\n            clearStorage();\n            this.props.closeWebSocket();\n            this.props.logout();\n            this.props.history.push(\"/login\");\n        });\n\n    openStatusBoxStateStatus = () => {\n        this.state.status_text = this.props.userStatus === \"You are online\" ? \"\" : this.props.userStatus;\n        this.setState({\n            ...this.state,\n            status_box_state: false,\n            status_text: this.state.status_text\n        });\n    };\n\n    closeStatusBoxStateStatus = () => {\n        this.props.changeUserStatus(this.state.status_text);\n        this.setState({\n            ...this.state,\n            status_box_state: true\n        });\n    };\n\n    onChangeStatus = (e) =>\n        this.setState({\n            ...this.state,\n            status_text: e.target.value\n        });\n\n    render = () => (\n        <div className=\"wrapper\">\n            <div className=\"profile-left\">\n                <div className=\"box user-name\">Hey! - {this.props.userFullName}</div>\n                <div className=\"box status\">\n                    {this.state.status_box_state\n                        ? <div onClick={this.openStatusBoxStateStatus}>{this.props.userStatus}</div>\n                        :\n                        <Input onBlur={this.closeStatusBoxStateStatus} onPressEnter={this.closeStatusBoxStateStatus}\n                            placeholder=\"Please enter a status...\" value={this.state.status_text}\n                            ref=\"statusInput\" onChange={this.onChangeStatus}/>\n                    }\n                </div>\n            </div>\n            <div className=\"profile-right logout\">\n                <a href=\"#\" className=\"logout-a\" onClick={this.logOut}>\n                    <Icon type=\"logout\" style={{fontSize: 36, color: \"#444\"}}/>\n                </a>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    userFullName: state.userReducer.userFullName,\n    userName: state.userReducer.userName,\n    userStatus: state.userReducer.userStatus\n});\n\nconst mapDispatchToProps = dispatch => ({\n    changeUserStatus: status => dispatch(changeUserStatus(status)),\n    getProfile: () => dispatch(getProfile()),\n    logout: () => dispatch(logout()),\n    closeWebSocket: () => dispatch(closeWebSocket())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Profile));\n", "import React from \"react\";\nimport Gravatar from \"react-gravatar\";\nimport Ravatar from \"react-avatar\";\n\nexport default class Avatar extends React.Component {\n    render = () => <div className=\"friend-avatar\"/>;\n}\n\nexport class MainAvatar extends React.Component {\n    render = () => <div className=\"user-avatar\"/>;\n}\n\nexport class CustomAvatar extends React.Component {\n    render() {\n        const {avatar, type} = this.props;\n        const customClassName = `custom-avatar ${type}`;\n\n        switch (this.props.type) {\n            case \"main-avatar\":\n                return <Gravatar email={`${avatar}@gmail.com`} className={customClassName} default=\"identicon\"/>;\n            case \"new-avatar\":\n                return <Avatar icon=\"plus\" className={customClassName} style={{fontSize: 30}}/>;\n            case \"panel-avatar\":\n                return <Ravatar name={avatar} className={customClassName} size=\"50\"/>;\n            case \"panel-group-avatar\":\n                return <Ravatar name=\"G\" color=\"#001529\" className={customClassName} size=\"50\"/>;\n            case \"user-avatar\":\n                return <Ravatar name={avatar} className={customClassName} size=\"60\"/>;\n            case \"group-avatar\":\n                return <Ravatar name=\"G\" color=\"#001529\" className={customClassName} size=\"60\"/>;\n            case \"chat-avatar\":\n                return this.props.show\n                    ? <Ravatar name={avatar} className={customClassName} size=\"40\"/>\n                    : <div className=\"mock-small-avatar\"/>;\n            default:\n                return <Avatar className={customClassName}/>;\n        }\n    }\n}\n\nexport class SmallAvatar extends React.Component {\n    render = () => this.props.show\n        ? <div className=\"small-avatar\"/>\n        : <div className=\"mock-small-avatar\"/>;\n}\n", "import React from \"react\";\nimport {Alert, Button, Input, Modal, Tag} from \"antd\";\nimport {CustomAvatar} from \"./Avatar\";\nimport $ from \"jquery\";\nimport {connect} from \"react-redux\";\nimport {addNewUserChatGroup, removeUserChatGroup, startNewChatGroup} from \"../actions/Chat\";\n\nclass StartChatGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {visible: false};\n    };\n\n    showModal = () => this.setState({visible: true});\n\n    handleOk = () => {\n        this.setState({visible: false});\n        this.props.startNewChatGroup();\n    };\n\n    handleCancel = () => this.setState({visible: false});\n\n    addMoreUsername = () => {\n        const un = $(\"#add-user-name\");\n        this.props.addNewUserChatGroup(un.val());\n        un.val(\"\");\n    };\n\n    handleRemoveUsername = item => this.props.removeUserChatGroup(item);\n\n    render = () => <div>\n        <div className=\"new-action-menu\" onClick={this.showModal}>\n            <a href=\"#\">\n                <CustomAvatar type=\"new-avatar\"/>\n                <div className=\"new-text\">Start New Group Chat</div>\n            </a>\n        </div>\n        <Modal width=\"420px\" title=\"Start New Chat Group\" visible={this.state.visible} onOk={this.handleOk}\n            onCancel={this.handleCancel} okText=\"Start\" cancelText=\"Cancel\" className=\"start-chat-group-modal\">\n            {this.props.startChatGroupError && (\n                <Alert message={this.props.startChatGroupErrorMessage} type=\"error\"/>\n            )}\n            <p className=\"model-label\">Please enter user name:</p>\n            <div className=\"first-line\">\n                <Input ref={ref => {this.ref = ref;}} id=\"add-user-name\" className=\"add-user-name\" onPressEnter={this.addMoreUsername}/>\n                <Button onClick={this.addMoreUsername} type=\"primary\" shape=\"circle\" icon=\"plus\"/>\n            </div>\n            {this.props.startChatGroupList.length > 0 && (\n                <p className=\"model-label\" style={{marginBottom: 3, marginTop: 10}}>Selected:</p>\n            )}\n\n            {this.props.startChatGroupList.map((item, index) =>\n                <Tag key={index} closable onClose={e => {\n                    this.handleRemoveUsername(item);\n                    e.preventDefault();\n                }} color=\"#f50\">{item}</Tag>\n            )}\n        </Modal>\n    </div>;\n}\n\nconst mapStateToProps = state => ({\n    startChatGroupList: state.chatReducer.startChatGroupList,\n    startChatGroupError: state.chatReducer.startChatGroupError,\n    startChatGroupErrorMessage: state.chatReducer.startChatGroupErrorMessage\n});\n\nconst mapDispatchToProps = dispatch => ({\n    addNewUserChatGroup: username => dispatch(addNewUserChatGroup(username)),\n\n    removeUserChatGroup: username => dispatch(removeUserChatGroup(username)),\n\n    startNewChatGroup: () => dispatch(startNewChatGroup())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartChatGroup);\n", "import React from \"react\";\nimport {Menu} from \"antd\";\nimport {connect} from \"react-redux\";\nimport {Scrollbars} from \"react-custom-scrollbars\";\n\nimport {CustomAvatar} from \"./Avatar\";\nimport StartChatGroup from \"./StartChatGroup\";\nimport {changeMessageHeader, loadChatContainer, loadChatList, userSelected} from \"../actions/Chat\";\n\nclass ChatList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {menuaction: 1};\n    }\n\n    componentDidMount = () => this.props.loadChatList();\n\n    handleChangeChatItem = event => {\n        this.props.userSelected(event.key);\n        this.props.loadChatContainer(event.key);\n        for (let i = 0; i < this.props.chatList.length; i++) {\n            const chat = this.props.chatList[i];\n            if (chat.sessionId === event.key) {\n                this.props.changeMessageHeader(chat.name, chat.avatar, chat.groupchat);\n            }\n        }\n    };\n\n    render() {\n        if (!this.props.chatList) {\n            return \"Loading...\";\n        }\n\n        return (\n            <div className=\"d-flex flex-column full-height\">\n                <StartChatGroup/>\n                <Scrollbars autoHide autoHideTimeout={500} autoHideDuration={200}>\n                    <Menu theme=\"light\" mode=\"inline\" className=\"chat-list\"\n                        onSelect={this.handleChangeChatItem} selectedKeys={this.props.userSelectedKeys}>\n                        {\n                            this.props.chatList.map((item, index) =>\n                                <Menu.Item key={item.sessionId}>\n                                    <div style={{width: 60}}>\n                                        {\n                                            item.groupchat\n                                                ? <CustomAvatar type=\"group-avatar\"/>\n                                                : <CustomAvatar type=\"user-avatar\" avatar={item.avatar}/>\n                                        }\n                                    </div>\n                                    {\n                                        // FIXME <div className={item.unread > 0 ? \"unread-item\" : \"\"}\n                                        item.unread > 0 ?\n                                            <div className=\"unread-item\" style={{overflow: \"hidden\", paddingTop: 5}}>\n                                                <div className=\"user-name\">{item.name}</div>\n                                                <div className=\"history-message\">{item.lastMessage}</div>\n                                            </div>\n                                            :\n                                            <div style={{overflow: \"hidden\", paddingTop: 5}}>\n                                                <div className=\"user-name\">{item.name}</div>\n                                                <div className=\"history-message\">{item.lastMessage}</div>\n                                            </div>\n                                    }\n                                    {item.unread > 0 ? <div className=\"unread\">{item.unread}</div> : \"\"}\n                                </Menu.Item>\n                            )\n                        }\n                    </Menu>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    chatList: state.chatReducer.chatList,\n    userSelectedKeys: state.chatReducer.userSelectedKeys\n});\n\nconst mapDispatchToProps = dispatch => ({\n    loadChatList: () => dispatch(loadChatList()),\n    loadChatContainer: sessionId => dispatch(loadChatContainer(sessionId)),\n    changeMessageHeader: (avatar, title, groupchat) => dispatch(changeMessageHeader(avatar, title, groupchat)),\n    userSelected: sessionId => dispatch(userSelected(sessionId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList);\n", "import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {CustomAvatar} from \"./Avatar\";\n\nclass ChatHeader extends React.Component {\n    render = () => (\n        <div className='chat-header'>\n            <div style={{width: 50}}>\n                {\n                    this.props.header.groupchat\n                        ? <CustomAvatar type=\"panel-group-avatar\"/>\n                        : <CustomAvatar type=\"panel-avatar\" avatar={this.props.header.avatar}/>\n                }\n            </div>\n            <div style={{overflow: \"hidden\", paddingTop: 5}}>\n                <div className=\"panel-message\">{this.props.header.title}</div>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({header: state.chatReducer.messageHeader});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatHeader);\n", "import $ from \"jquery\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Alert, Input, Modal} from \"antd\";\n\nimport {CustomAvatar} from \"./Avatar\";\nimport {addNewFriend, changeStateAddFriendPopup} from \"../actions/AddressBook\";\n\nclass AddFriend extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {visible: false};\n\n        // this.handleOk = this.handleOk.bind(this);\n        // this.handleCancel = this.handleCancel.bind(this);\n        // this.showModal = this.showModal.bind(this);\n    };\n\n    handleOk = e => {\n        console.log(e);\n        let $add = $(\"#add-user-name\");\n        const un = $add.val();\n        $add.val(\"\");\n        this.props.addNewFriend(un);\n    };\n\n    handleCancel = () => this.props.changeStateAddFriendPopup(false);\n\n    showModal = () => this.props.changeStateAddFriendPopup(true);\n\n    render() {\n        return (\n            <div>\n                <div className=\"new-action-menu\" onClick={this.showModal}>\n                    <a href=\"#\">\n                        <CustomAvatar type=\"new-avatar\"/>\n                        <div className=\"new-text\">Add New Friend</div>\n                    </a>\n                </div>\n                <Modal title=\"Add New Friend\" okText=\"Add\" cancelText=\"Cancel\" width=\"420px\"\n                    visible={this.props.addFriendPopup} onOk={this.handleOk} onCancel={this.handleCancel}>\n                    {this.props.addFriendError && < Alert message={this.props.addFriendErrorMessage} type=\"error\"/>}\n                    <p className=\"model-label\">Please enter user name:</p>\n                    <Input id=\"add-user-name\" className=\"add-user-name\" onPressEnter={this.handleOk}/>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addFriendError: state.addressBookReducer.addFriendError,\n        addFriendErrorMessage: state.addressBookReducer.addFriendErrorMessage,\n        addFriendPopup: state.addressBookReducer.addFriendPopup\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addNewFriend: username => dispatch(addNewFriend(username)),\n        changeStateAddFriendPopup: state => dispatch(changeStateAddFriendPopup(state))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddFriend);\n", "import React from \"react\";\nimport {Menu} from \"antd\";\nimport {connect} from \"react-redux\";\nimport {Scrollbars} from \"react-custom-scrollbars\";\n\nimport AddFriend from \"./AddFriend\";\nimport {CustomAvatar} from \"./Avatar\";\nimport {handleChangeAddressBook, loadAddressBookList} from \"../actions/AddressBook\";\nimport {changeMessageHeader} from \"../actions/Chat\";\n\nclass AddressBook extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            current: [],\n            newselect: []\n        };\n        this.handleCurrentChange = this.handleCurrentChange.bind(this);\n        this.handleNewChange = this.handleNewChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.loadAddressBookList();\n    }\n\n    handleCurrentChange(event) {\n        this.setState({\n            ...this.state,\n            current: [event.key],\n            newselect: []\n        });\n        this.props.handleChangeAddressBook(this.props.addressBookList[event.key].userId);\n        this.props.changeMessageHeader(this.props.addressBookList[event.key].name, this.props.addressBookList[event.key].avatar, false);\n    }\n\n    handleNewChange(event) {\n        this.setState({\n            ...this.state,\n            newselect: [event.key],\n            current: []\n        });\n        console.log(event.key);\n        this.props.handleChangeAddressBook(this.props.newAddressBookList[event.key].userId);\n        this.props.changeMessageHeader(this.props.newAddressBookList[event.key].name, this.props.newAddressBookList[event.key].avatar, false);\n    }\n\n    render() {\n        return (\n            <div className=\"d-flex flex-column full-height address-book-menu\">\n                <AddFriend/>\n                <Scrollbars autoHide autoHideTimeout={500} autoHideDuration={200}>\n                    {this.props.newAddressBookList.length > 0 ?\n                        <div>\n                            <hr className=\"hr-sub-menu-title\"/>\n                            < div className=\"sub-menu-title new-add\"> New Friends\n                                ({this.props.newAddressBookList.length})\n                            </div>\n                            <Menu theme=\"light\" mode=\"inline\" defaultSelectedKeys={[]}\n                                selectedKeys={this.state.newselect} className=\"address-book new-address-book\"\n                                onSelect={this.handleNewChange}>\n                                {this.props.newAddressBookList.map((item, index) =>\n                                    <Menu.Item key={index}>\n                                        <div style={{width: 60}}>\n                                            <CustomAvatar type=\"user-avatar\" avatar={item.avatar}/>\n                                        </div>\n                                        {\n                                            item.isOnline\n                                                ? <div className=\"status-point online\"/>\n                                                : <div className=\"status-point offline\"/>\n                                        }\n                                        <div style={{overflow: \"hidden\", paddingTop: 5}}>\n                                            <div className=\"user-name\">{item.name}</div>\n                                            <div className=\"history-message\">{item.status}</div>\n                                        </div>\n                                    </Menu.Item>\n                                )}\n                            </Menu>\n                        </div>\n                        :\n                        \"\"\n                    }\n                    <hr className=\"hr-sub-menu-title\"/>\n                    <div className=\"sub-menu-title\">Friends ({this.props.addressBookList.length})</div>\n                    <Menu theme=\"light\" mode=\"inline\" defaultSelectedKeys={[]} selectedKeys={this.state.current}\n                        className=\"address-book\" onSelect={this.handleCurrentChange}>\n                        {this.props.addressBookList.map((item, index) =>\n                            <Menu.Item key={index}>\n                                <div style={{width: 60}}>\n                                    <CustomAvatar type=\"user-avatar\" avatar={item.avatar}/>\n                                </div>\n                                {\n                                    item.isOnline\n                                        ? <div className=\"status-point online\"/>\n                                        : <div className=\"status-point offline\"/>\n                                }\n                                <div style={{overflow: \"hidden\", paddingTop: 5}}>\n                                    <div className=\"user-name\">{item.name}</div>\n                                    <div className=\"history-message\">{item.status}</div>\n                                </div>\n                            </Menu.Item>\n                        )}\n                    </Menu>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        addressBookList: state.addressBookReducer.addressBookList,\n        newAddressBookList: state.addressBookReducer.newAddressBookList\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        loadAddressBookList() {\n            dispatch(loadAddressBookList());\n        },\n        changeMessageHeader(avatar, title, groupchat) {\n            dispatch(changeMessageHeader(avatar, title, groupchat));\n        },\n        handleChangeAddressBook(userId) {\n            dispatch(handleChangeAddressBook(userId));\n        }\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressBook);\n", "import React from \"react\";\nimport {SlideDown} from \"react-slidedown\";\n\nimport {CustomAvatar} from \"./Avatar\";\n\nexport default class ChatItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {showDate: false};\n    };\n\n    handleItemClick = () => this.setState({showDate: !this.state.showDate});\n\n    render() {\n        const cssClass = this.props.type === 1 ? \"chat-item-owner\" : \"chat-item-other\";\n        const cssContentClass = this.props.type === 1 ? \"chat-item-content-owner\" : \"chat-item-content-other\";\n        return (\n            <div onClick={this.handleItemClick} className={`chat-item chat-item-outer ${cssClass}`}>\n                <div className={`chat-item ${cssClass}`}>\n                    <CustomAvatar type=\"chat-avatar\" avatar={this.props.avatar} show={this.props.showavatar}/>\n                    <div className={`chat-item-content ${cssContentClass}`}>{this.props.value}</div>\n                </div>\n                {this.state.showDate && (\n                    <SlideDown>\n                        <div className={\"chat-item-date\"}>{this.props.date}</div>\n                    </SlideDown>\n                )}\n            </div>\n        );\n    }\n}\n", "import React from \"react\";\nimport {connect} from \"react-redux\";\nimport ChatItem from \"./ChatItem\";\n\nclass MessagePanel extends React.Component {\n    scrollToBottom = () => this.messagesEnd.scrollIntoView({behavior: \"smooth\"});\n\n    componentDidUpdate = () => this.scrollToBottom();\n\n    render = () => (\n        <div className='chat-content'>\n            <div ref={(el) => {this.messagesEnd = el;}}/>\n            {this.props.messageItems.map((item, index) =>\n                <ChatItem key={index} type={item.type} value={item.message} showavatar={item.showavatar}\n                    avatar={item.avatar} date={item.createdDate}/>\n            )}\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({messageItems: state.chatReducer.messageItems});\n\nconst mapDispatchToProps = () => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagePanel);\n", "import $ from \"jquery\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {Button, Icon, Input, Layout, Menu} from \"antd\";\n\nimport Profile from \"../components/Profile\";\nimport ChatList from \"../components/ChatList\";\nimport ChatHeader from \"../components/ChatHeader\";\nimport {CustomAvatar} from \"../components/Avatar\";\nimport AddressBook from \"../components/AddressBook\";\nimport MessagePanel from \"../components/MessagePanel\";\nimport {isAuthenticated, isEmptyString} from \"../utils/utils\";\nimport {closeWebSocket, initialWebSocket, loadChatContainer, submitChatMessage} from \"../actions/Chat\";\n\nconst {Sider} = Layout;\nconst {TextArea} = Input;\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {menuaction: 1};\n    };\n\n    componentDidMount = () => {\n        this.props.initialWebSocket();\n    };\n\n    componentWillUnmount = () => {};\n\n    handleMainMenuChange = e => {\n        this.setState({menuaction: e.key});\n    };\n\n    handleMessageEnter = e => {\n        let charCode = e.keyCode || e.which;\n        if (e.shiftKey) return;\n\n        e.preventDefault();\n        let message = e.target.value;\n        if (!isEmptyString(message)) {\n            this.props.submitChatMessage(message);\n        }\n        e.target.value = \"\";\n    };\n\n    handleSendClick = e => {\n        const txtMsg = $(\"#messageTextArea\");\n        let message = txtMsg.val();\n        if (!isEmptyString(message)) {\n            this.props.submitChatMessage(message);\n        }\n        txtMsg.val(\"\");\n    };\n\n    render() {\n        return isAuthenticated()\n            ? <Redirect to=\"/login\"/>\n            : <div style={{height: `100vh`}}>\n                <Layout>\n                    <Sider breakpoint=\"lg\" collapsedWidth=\"0\" onBreakpoint={() => {}}\n                        onCollapse={() => {}} width=\"80\" id=\"main-side-menu\">\n                        <CustomAvatar type=\"main-avatar\" avatar={this.props.userName}/>\n                        <div className=\"menu-separation\"/>\n                        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]} onSelect={this.handleMainMenuChange}>\n                            <Menu.Item key=\"1\"><Icon type=\"message\" style={{fontSize: 30}}/></Menu.Item>\n                            <Menu.Item key=\"2\"><Icon type=\"bars\" style={{fontSize: 30}}/></Menu.Item>\n                        </Menu>\n                    </Sider>\n                    <Sider breakpoint=\"lg\" collapsedWidth=\"0\" theme=\"light\"\n                        onBreakpoint={() => {}} onCollapse={() => {}} width=\"300\" id=\"sub-side-menu\">\n                        <Profile/>\n                        <div className=\"menu-separation\"/>\n                        {this.state.menuaction === 1 ? <ChatList/> : <AddressBook/>}\n                    </Sider>\n                    <div className='chat-container' style={{padding: 0}}>\n                        <ChatHeader/>\n                        <MessagePanel/>\n                        <div className='chat-footer'>\n                            <TextArea id=\"messageTextArea\" onPressEnter={this.handleMessageEnter} rows={1}\n                                placeholder=\"Type a new message\" ref=\"messageTextArea\"/>\n                            <Button type=\"primary\" onClick={this.handleSendClick}>Send</Button>\n                        </div>\n                    </div>\n                </Layout>\n            </div>;\n    }\n}\n\nconst mapStateToProps = state => ({userName: state.userReducer.userName});\n\nconst mapDispatchToProps = dispatch => ({\n    initialWebSocket: () => dispatch(initialWebSocket()),\n\n    closeWebSocket: () => dispatch(closeWebSocket()),\n\n    loadChatContainer: sessionId => dispatch(loadChatContainer(sessionId)),\n\n    submitChatMessage: message => dispatch(submitChatMessage(message))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n", "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {Provider} from \"react-redux\";\n\nimport rootReducer from \"./reducers\";\nimport Portal from \"./pages/portal\";\nimport Main from \"./pages/main\";\nimport {api} from \"./api/api\";\nimport {clearStorage} from \"./utils/utils\";\n\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport \"react-slidedown/lib/slidedown.css\";\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\nwindow.store = store;\n\napi.post(`/api/protected/ping`).then(data => {\n    console.log(\"ping\");\n    console.log(data);\n}, data => {\n    console.log(data);\n    console.log(\"not-ping\");\n    clearStorage();\n});\n\nlet provider = (\n    <Provider store={store}>\n        <Router>\n            <div style={{overflow: \"hidden\"}}>\n                <Route exact path='/login' component={Portal}/>\n                <Route exact path='/' component={Main}/>\n            </div>\n        </Router>\n    </Provider>\n);\n\nReactDOM.render(provider, document.getElementById(\"root\"));\n"
], "sourceRoot": ""
}
